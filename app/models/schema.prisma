generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String       @id @default(uuid()) @db.Uuid
    username       String
    email          String       @unique
    password       String? // Nullable for Oath
    oauth_provider AuthProvider
    oauth_id       String?      @unique // Only for OAuth users
    created_at     DateTime     @default(now())
    updated_at     DateTime     @updatedAt
    Character      Character[]
}

enum AuthProvider {
    manual
    google
    discord
}

// HUSKAT monitor performance impact of Json fields, normalise if tradeoff for flexibility is too much
// ENSURE JSON FIELDS ARE STRICTLY CHECKED, VALIDATED AND ENFORCED FOR TYPE SHAPES
model Character {
    // Searchable query normalised fields here
    id             String @id @default(uuid()) @db.Uuid // Unique character identifier
    userId         String @db.Uuid
    characterName  String
    characterClass String @map("class")
    race           String
    level          Int    @default(0)

    characterDetails Json // Save characterDetails in full as well here for frontend
    stats            Json
    status           Json
    bonuses          Json
    savingThrows     Json
    skills           Json

    inventory Json? // Items, equipment, etc. To be implemented.

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign fields
    playerName User @relation(fields: [userId], references: [id], onDelete: Cascade) // user reference fields ties User model id to Character model userId, if user is deleted, cascade delete all characters.
}
