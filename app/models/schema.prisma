generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String       @id @default(uuid())
    username       String
    email          String       @unique
    password       String? // Nullable for Oath
    oauth_provider AuthProvider
    oauth_id       String?      @unique // Only for OAuth users
    created_at     DateTime     @default(now())
    updated_at     DateTime     @updatedAt
    Character      Character[]
}

enum AuthProvider {
    manual
    google
    discord
}

// HUSKAT monitor performance impact of Json fields, normalise if tradeoff for flexibility is too much
// ENSURE JSON FIELDS ARE STRICTLY CHECKED, VALIDATED AND ENFORCED FOR TYPE SHAPES
model Character {
    id         String   @id @default(uuid()) // Unique character identifier
    userId     String   @db.Uuid
    name       String
    class      String
    level      Int
    race       String
    background String?
    alignment  String?
    stats      Json // Stores ability scores, modifiers, temp scores, temp modifiers
    skills     Json // Stores learned skills, ranks, etc.
    inventory  Json // Items, equipment, etc.
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade) // user reference fields ties User model id to Character model userId, if user is deleted, cascade delete all characters.
}
